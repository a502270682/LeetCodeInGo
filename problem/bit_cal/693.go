package bit_cal

/*
给定一个正整数，检查它的二进制表示是否总是 0、1 交替出现：换句话说，就是二进制表示中相邻两位的数字永不相同。


示例 1：

输入：n = 5
输出：true
解释：5 的二进制表示是：101
示例 2：

输入：n = 7
输出：false
解释：7 的二进制表示是：111.
示例 3：

输入：n = 11
输出：false
解释：11 的二进制表示是：1011.

*/

/*
另外一种更为巧妙的方式是利用交替位二进制数性质。

当给定值 n 为交替位二进制数时，将 n 右移一位得到的值 mm仍为交替位二进制数，
且与原数 n 错开一位，两者异或能够得到形如 0000...1111 的结果 x，此时对 x 执行加法（进位操作）能够得到形如 0000...10000 的结果，
将该结果与 x 执行按位与后能够得到全 0 结果。

*/
func hasAlternatingBits(n int) bool {
	x := n ^ (n >> 1)
	return (x & (x + 1)) == 0
}
