package problem

import "math"

/*
给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。

相邻的结点 在这里指的是 下标 与 上一层结点下标 相同或者等于 上一层结点下标 + 1 的两个结点。

 

例如，给定三角形：

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。

 

说明：

如果你可以只使用 O(n) 的额外空间（n 为三角形的总行数）来解决这个问题，那么你的算法会很加分。
 */


/*
************题解***********
方法一：动态规划
思路与算法

我们用 f[i][j]f[i][j] 表示从三角形顶部走到位置 (i, j)(i,j) 的最小路径和。这里的位置 (i, j)(i,j) 指的是三角形中第 ii 行第 jj 列（均从 00 开始编号）的位置。

由于每一步只能移动到下一行「相邻的节点」上，因此要想走到位置 (i, j)(i,j)，上一步就只能在位置 (i - 1, j - 1)(i−1,j−1) 或者位置 (i - 1, j)(i−1,j)。我们在这两个位置中选择一个路径和较小的来进行转移，状态转移方程为：

f[i][j] = \min(f[i-1][j-1], f[i-1][j]) + c[i][j]
f[i][j]=min(f[i−1][j−1],f[i−1][j])+c[i][j]

其中 c[i][j]c[i][j] 表示位置 (i, j)(i,j) 对应的元素值。

注意第 ii 行有 i+1i+1 个元素，它们对应的 jj 的范围为 [0, i][0,i]。当 j=0j=0 或 j=ij=i 时，上述状态转移方程中有一些项是没有意义的。例如当 j=0j=0 时，f[i-1][j-1]f[i−1][j−1] 没有意义，因此状态转移方程为：

f[i][0] = f[i-1][0] + c[i][0]
f[i][0]=f[i−1][0]+c[i][0]

即当我们在第 ii 行的最左侧时，我们只能从第 i-1i−1 行的最左侧移动过来。当 j=ij=i 时，f[i-1][j]f[i−1][j] 没有意义，因此状态转移方程为：

f[i][i] = f[i-1][i-1] + c[i][i]
f[i][i]=f[i−1][i−1]+c[i][i]

即当我们在第 ii 行的最右侧时，我们只能从第 i-1i−1 行的最右侧移动过来。

最终的答案即为 f[n-1][0]f[n−1][0] 到 f[n-1][n-1]f[n−1][n−1] 中的最小值，其中 nn 是三角形的行数。

细节

状态转移方程的边界条件是什么？由于我们已经去除了所有「没有意义」的状态，因此边界条件可以定为：

f[0][0] = c[0][0]
f[0][0]=c[0][0]

即在三角形的顶部时，最小路径和就等于对应位置的元素值。这样一来，我们从 11 开始递增地枚举 ii，并在 [0, i][0,i] 的范围内递增地枚举 jj，就可以完成所有状态的计算。

 */

func minimumTotal(triangle [][]int) int {
	n := len(triangle)
	if n <= 0 {
		return 0
	}
	// 代表从最顶层到当前（i,j）点的最短距离
	dp := make([][]int, n)
	for i := 0; i< n; i++ {
		dp[i] = make([]int, n)
	}
	dp[0][0] = triangle[0][0]
	for i := 1; i<n; i++ {
		dp[i][0] = dp[i-1][0] + triangle[i][0]
		for j := 1; j<i; j++ {
			dp[i][j] = min(dp[i-1][j],dp[i-1][j-1]) + triangle[i][j]
		}
		dp[i][i] = dp[i-1][i-1] + triangle[i][i]
	}
	res := math.MaxInt32
	// 最后一排找最小的即可
	for i := 0; i<n; i++ {
		res = min(res, dp[n-1][i])
	}
	return res
}
